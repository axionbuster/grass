name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        c_compiler: [ gcc, clang-17, cl, icx ]
        build_type: [ RelWithDebInfo ]
        exclude:
          - os: ubuntu-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang-17
          - os: windows-latest
            c_compiler: icx
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: icx
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang-17
            cpp_compiler: clang++-17
          - os: ubuntu-latest
            c_compiler: icx
            cpp_compiler: icpx
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang-17
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v3

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs.
        # These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Clang 17 (Ubuntu with Clang)
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang-17'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod u+x ./llvm.sh
          sudo ./llvm.sh 17

      - name: Set up Intel C++ Compiler (Ubuntu with Intel Compiler)
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'icx'
        run: |
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install -y intel-oneapi-dpcpp-cpp-compiler
          echo "/opt/intel/oneapi/compiler/latest/bin" >> $GITHUB_PATH

      - name: Install Raylib dependencies (Ubuntu)
        id: install-deps-u
        if: matrix.os == 'ubuntu-latest'
        run: >
          sudo apt install libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev
          libxcursor-dev libxinerama-dev

      - name: Install Clang 17 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@17
          echo "/usr/local/opt/llvm/bin" >> $GITHUB_PATH
          ls /usr/local/opt/llvm/bin

      - name: Print PATH (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "PATH = $PATH"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory.
        # `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows
        # generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default
        # Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        env:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: axionbuster/grass
